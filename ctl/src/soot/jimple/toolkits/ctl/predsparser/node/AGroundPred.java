/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.toolkits.ctl.predsparser.node;

import soot.jimple.toolkits.ctl.predsparser.analysis.*;

@SuppressWarnings("nls")
public final class AGroundPred extends PPred
{
    private TIdentifier _identifier_;
    private TLParen _lParen_;
    private TRParen _rParen_;
    private TArr _arr_;
    private TAny _any_;

    public AGroundPred()
    {
        // Constructor
    }

    public AGroundPred(
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TLParen _lParen_,
        @SuppressWarnings("hiding") TRParen _rParen_,
        @SuppressWarnings("hiding") TArr _arr_,
        @SuppressWarnings("hiding") TAny _any_)
    {
        // Constructor
        setIdentifier(_identifier_);

        setLParen(_lParen_);

        setRParen(_rParen_);

        setArr(_arr_);

        setAny(_any_);

    }

    @Override
    public Object clone()
    {
        return new AGroundPred(
            cloneNode(this._identifier_),
            cloneNode(this._lParen_),
            cloneNode(this._rParen_),
            cloneNode(this._arr_),
            cloneNode(this._any_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAGroundPred(this);
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TLParen getLParen()
    {
        return this._lParen_;
    }

    public void setLParen(TLParen node)
    {
        if(this._lParen_ != null)
        {
            this._lParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lParen_ = node;
    }

    public TRParen getRParen()
    {
        return this._rParen_;
    }

    public void setRParen(TRParen node)
    {
        if(this._rParen_ != null)
        {
            this._rParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rParen_ = node;
    }

    public TArr getArr()
    {
        return this._arr_;
    }

    public void setArr(TArr node)
    {
        if(this._arr_ != null)
        {
            this._arr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arr_ = node;
    }

    public TAny getAny()
    {
        return this._any_;
    }

    public void setAny(TAny node)
    {
        if(this._any_ != null)
        {
            this._any_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._any_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identifier_)
            + toString(this._lParen_)
            + toString(this._rParen_)
            + toString(this._arr_)
            + toString(this._any_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._lParen_ == child)
        {
            this._lParen_ = null;
            return;
        }

        if(this._rParen_ == child)
        {
            this._rParen_ = null;
            return;
        }

        if(this._arr_ == child)
        {
            this._arr_ = null;
            return;
        }

        if(this._any_ == child)
        {
            this._any_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._lParen_ == oldChild)
        {
            setLParen((TLParen) newChild);
            return;
        }

        if(this._rParen_ == oldChild)
        {
            setRParen((TRParen) newChild);
            return;
        }

        if(this._arr_ == oldChild)
        {
            setArr((TArr) newChild);
            return;
        }

        if(this._any_ == oldChild)
        {
            setAny((TAny) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
