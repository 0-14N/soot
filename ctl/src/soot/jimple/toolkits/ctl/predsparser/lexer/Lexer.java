/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.toolkits.ctl.predsparser.lexer;

import java.io.*;
import soot.jimple.toolkits.ctl.predsparser.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLParen(line, pos); }
    Token new1(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRParen(line, pos); }
    Token new2(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TArr(line, pos); }
    Token new3(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TComma(line, pos); }
    Token new4(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMetaType(text, line, pos); }
    Token new5(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }
    Token new6(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIgnored(text, line, pos); }
    Token new7(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAny(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 12, 1}, {13, 13, 4}, {14, 31, 1}, {32, 32, 5}, {33, 34, 1}, {35, 35, 6}, {36, 36, 7}, {37, 39, 1}, {40, 40, 8}, {41, 41, 9}, {42, 43, 1}, {44, 44, 10}, {45, 46, 1}, {47, 47, 11}, {48, 62, 1}, {63, 63, 12}, {64, 64, 1}, {65, 66, 13}, {67, 67, 14}, {68, 72, 13}, {73, 73, 15}, {74, 75, 13}, {76, 76, 16}, {77, 85, 13}, {86, 86, 17}, {87, 90, 13}, {91, 91, 1}, {92, 92, 18}, {93, 94, 1}, {95, 95, 19}, {96, 96, 1}, {97, 122, 20}, {123, 65535, 1}, },
            {{0, 9, 1}, {11, 12, 1}, {14, 34, 1}, {36, 65535, 1}, },
            {{0, 34, -2}, {36, 46, 1}, {47, 47, 11}, {48, 65535, 1}, },
            {{9, 9, 21}, {10, 10, 3}, {13, 13, 4}, {32, 32, 22}, {47, 47, 23}, },
            {{9, 47, -5}, },
            {{0, 65535, -4}, },
            {},
            {{0, 34, -3}, {36, 36, 24}, {37, 47, 1}, {48, 57, 25}, {58, 62, 1}, {63, 63, 26}, {64, 64, 1}, {65, 90, 27}, {91, 91, 1}, {92, 92, 28}, {93, 94, 1}, {95, 95, 29}, {96, 96, 1}, {97, 122, 30}, {123, 65535, 1}, },
            {{0, 65535, -3}, },
            {{0, 65535, -3}, },
            {{0, 65535, -3}, },
            {{0, 34, -3}, {36, 41, 1}, {42, 42, 31}, {43, 46, 1}, {47, 47, 32}, {48, 65535, 1}, },
            {{0, 62, -9}, {63, 63, 33}, {64, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 96, -9}, {97, 110, 30}, {111, 111, 34}, {112, 122, 30}, {123, 65535, 1}, },
            {{0, 96, -9}, {97, 99, 30}, {100, 100, 35}, {101, 108, 30}, {109, 109, 36}, {110, 122, 30}, {123, 65535, 1}, },
            {{0, 110, -16}, {111, 111, 37}, {112, 65535, -16}, },
            {{0, 96, -9}, {97, 97, 38}, {98, 122, 30}, {123, 65535, 1}, },
            {{0, 12, -3}, {14, 31, 1}, {32, 32, 39}, {33, 33, 1}, {34, 34, 40}, {35, 35, 41}, {36, 38, 1}, {39, 39, 42}, {40, 45, 1}, {46, 46, 43}, {47, 91, 1}, {92, 92, 44}, {93, 97, 1}, {98, 98, 45}, {99, 101, 1}, {102, 102, 46}, {103, 109, 1}, {110, 110, 47}, {111, 113, 1}, {114, 114, 48}, {115, 115, 1}, {116, 116, 49}, {117, 117, 50}, {118, 65535, 1}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{9, 47, -5}, },
            {{9, 47, -5}, },
            {{42, 42, 51}, {47, 47, 52}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 62, -9}, {63, 63, 53}, {64, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 31, -20}, {32, 32, 54}, {33, 33, 1}, {34, 34, 55}, {35, 35, 56}, {36, 38, 1}, {39, 39, 57}, {40, 45, 1}, {46, 46, 58}, {47, 91, 1}, {92, 92, 59}, {93, 97, 1}, {98, 98, 60}, {99, 101, 1}, {102, 102, 61}, {103, 109, 1}, {110, 110, 62}, {111, 113, 1}, {114, 114, 63}, {115, 115, 1}, {116, 116, 64}, {117, 117, 65}, {118, 65535, 1}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 9, 66}, {10, 10, 67}, {11, 12, 66}, {13, 13, 67}, {14, 34, 66}, {35, 35, 67}, {36, 41, 66}, {42, 42, 68}, {43, 65535, 66}, },
            {{0, 8, 69}, {9, 9, 70}, {10, 10, 3}, {11, 12, 69}, {13, 13, 4}, {14, 31, 69}, {32, 32, 71}, {33, 34, 69}, {35, 35, 72}, {36, 46, 69}, {47, 47, 73}, {48, 65535, 69}, },
            {{0, 65535, -28}, },
            {{0, 96, -9}, {97, 109, 30}, {110, 110, 74}, {111, 122, 30}, {123, 65535, 1}, },
            {{0, 96, -9}, {97, 100, 30}, {101, 101, 75}, {102, 122, 30}, {123, 65535, 1}, },
            {{0, 96, -9}, {97, 108, 30}, {109, 109, 76}, {110, 65535, -17}, },
            {{0, 96, -9}, {97, 98, 30}, {99, 99, 77}, {100, 122, 30}, {123, 65535, 1}, },
            {{0, 96, -9}, {97, 107, 30}, {108, 108, 78}, {109, 122, 30}, {123, 65535, 1}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{36, 36, 79}, {48, 57, 80}, {63, 63, 81}, {65, 90, 82}, {92, 92, 83}, {95, 95, 84}, {97, 122, 85}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 34, -3}, {36, 47, 1}, {48, 57, 86}, {58, 64, 1}, {65, 70, 87}, {71, 96, 1}, {97, 102, 88}, {103, 65535, 1}, },
            {{0, 41, 67}, {42, 42, 89}, {43, 65535, 67}, },
            {{0, 8, 72}, {9, 9, 90}, {10, 10, 3}, {11, 12, 72}, {13, 13, 4}, {14, 31, 72}, {32, 32, 91}, {33, 46, 72}, {47, 47, 92}, {48, 65535, 72}, },
            {{0, 65535, -28}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{36, 122, -43}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 47, -52}, {48, 57, 93}, {58, 64, 1}, {65, 70, 94}, {71, 96, 1}, {97, 102, 95}, {103, 65535, 1}, },
            {{0, 65535, -33}, },
            {{0, 65535, -53}, },
            {{0, 9, 96}, {10, 10, 97}, {11, 12, 96}, {13, 13, 97}, {14, 34, 96}, {35, 35, 97}, {36, 41, 96}, {42, 42, 68}, {43, 46, 96}, {47, 47, 98}, {48, 65535, 96}, },
            {{0, 65535, -34}, },
            {{0, 65535, -34}, },
            {{0, 65535, -34}, },
            {{0, 65535, -54}, },
            {{0, 35, -34}, {36, 41, 69}, {42, 42, 99}, {43, 46, 69}, {47, 47, 100}, {48, 65535, 69}, },
            {{0, 96, -9}, {97, 114, 30}, {115, 115, 101}, {116, 122, 30}, {123, 65535, 1}, },
            {{0, 109, -36}, {110, 110, 102}, {111, 65535, -36}, },
            {{0, 100, -37}, {101, 101, 103}, {102, 65535, -37}, },
            {{0, 96, -9}, {97, 97, 104}, {98, 65535, -19}, },
            {{0, 96, -9}, {97, 116, 30}, {117, 117, 105}, {118, 122, 30}, {123, 65535, 1}, },
            {{36, 122, -43}, },
            {{36, 122, -43}, },
            {{36, 57, -43}, {63, 63, 106}, {65, 122, -43}, },
            {{36, 122, -43}, },
            {{32, 32, 107}, {34, 34, 108}, {35, 35, 56}, {39, 39, 109}, {46, 46, 110}, {92, 92, 111}, {98, 98, 112}, {102, 102, 113}, {110, 110, 114}, {114, 114, 115}, {116, 116, 116}, {117, 117, 117}, },
            {{36, 122, -43}, },
            {{36, 122, -43}, },
            {{0, 47, -52}, {48, 57, 118}, {58, 64, 1}, {65, 70, 119}, {71, 96, 1}, {97, 102, 120}, {103, 65535, 1}, },
            {{0, 65535, -88}, },
            {{0, 65535, -88}, },
            {{0, 41, 97}, {42, 42, 89}, {43, 46, 97}, {47, 47, 121}, {48, 65535, 97}, },
            {{0, 65535, -54}, },
            {{0, 65535, -54}, },
            {{0, 32, -54}, {33, 41, 72}, {42, 42, 122}, {43, 46, 72}, {47, 47, 123}, {48, 65535, 72}, },
            {{0, 47, -52}, {48, 57, 124}, {58, 64, 1}, {65, 70, 125}, {71, 96, 1}, {97, 102, 126}, {103, 65535, 1}, },
            {{0, 65535, -95}, },
            {{0, 65535, -95}, },
            {{0, 9, 127}, {10, 10, 128}, {11, 12, 127}, {13, 13, 128}, {14, 34, 127}, {35, 35, 128}, {36, 41, 127}, {42, 42, 129}, {43, 65535, 127}, },
            {{0, 41, 128}, {42, 42, 130}, {43, 65535, 128}, },
            {{0, 65535, -4}, },
            {{0, 8, 131}, {9, 9, 132}, {10, 10, 133}, {11, 12, 131}, {13, 13, 134}, {14, 31, 131}, {32, 32, 135}, {33, 34, 131}, {35, 35, 136}, {36, 41, 131}, {42, 42, 137}, {43, 46, 131}, {47, 47, 138}, {48, 65535, 131}, },
            {{0, 65535, -75}, },
            {{0, 96, -9}, {97, 115, 30}, {116, 116, 139}, {117, 122, 30}, {123, 65535, 1}, },
            {{0, 115, -103}, {116, 116, 140}, {117, 65535, -103}, },
            {{0, 99, -17}, {100, 100, 141}, {101, 122, 30}, {123, 65535, 1}, },
            {{0, 107, -40}, {108, 108, 142}, {109, 65535, -40}, },
            {{0, 100, -37}, {101, 101, 143}, {102, 65535, -37}, },
            {{36, 122, -83}, },
            {{36, 122, -43}, },
            {{36, 122, -43}, },
            {{36, 122, -43}, },
            {{36, 122, -43}, },
            {{36, 122, -43}, },
            {{36, 122, -43}, },
            {{36, 122, -43}, },
            {{36, 122, -43}, },
            {{36, 122, -43}, },
            {{36, 122, -43}, },
            {{48, 57, 144}, {65, 70, 145}, {97, 102, 146}, },
            {{0, 47, -52}, {48, 57, 147}, {58, 64, 1}, {65, 70, 148}, {71, 96, 1}, {97, 102, 149}, {103, 65535, 1}, },
            {{0, 65535, -120}, },
            {{0, 65535, -120}, },
            {{9, 47, -5}, },
            {{0, 8, 136}, {9, 9, 150}, {10, 10, 133}, {11, 12, 136}, {13, 13, 134}, {14, 31, 136}, {32, 32, 151}, {33, 41, 136}, {42, 42, 152}, {43, 46, 136}, {47, 47, 153}, {48, 65535, 136}, },
            {{0, 65535, -94}, },
            {{0, 47, -52}, {48, 57, 154}, {58, 64, 1}, {65, 70, 155}, {71, 96, 1}, {97, 102, 156}, {103, 65535, 1}, },
            {{0, 65535, -126}, },
            {{0, 65535, -126}, },
            {{0, 65535, -98}, },
            {{0, 65535, -99}, },
            {{0, 41, -70}, {42, 42, 129}, {43, 65535, -70}, },
            {{0, 41, 97}, {42, 42, 130}, {43, 65535, -91}, },
            {{0, 65535, -101}, },
            {{0, 65535, -101}, },
            {{0, 8, 67}, {9, 9, 157}, {10, 10, 133}, {11, 12, 67}, {13, 13, 134}, {14, 31, 67}, {32, 32, 158}, {33, 41, 67}, {42, 42, 89}, {43, 46, 67}, {47, 47, 159}, {48, 65535, 67}, },
            {{0, 65535, -135}, },
            {{0, 65535, -101}, },
            {{0, 65535, -124}, },
            {{0, 8, 160}, {9, 9, 161}, {10, 10, 162}, {11, 12, 160}, {13, 13, 163}, {14, 31, 160}, {32, 32, 164}, {33, 34, 160}, {35, 35, 165}, {36, 41, 160}, {42, 42, 137}, {43, 46, 160}, {47, 47, 166}, {48, 65535, 160}, },
            {{0, 41, -101}, {42, 42, 167}, {43, 46, 131}, {47, 47, 168}, {48, 65535, 131}, },
            {{0, 96, -9}, {97, 97, 169}, {98, 65535, -19}, },
            {{0, 96, -9}, {97, 104, 30}, {105, 105, 170}, {106, 122, 30}, {123, 65535, 1}, },
            {{0, 104, -142}, {105, 105, 171}, {106, 65535, -142}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{48, 57, 172}, {65, 70, 173}, {97, 102, 174}, },
            {{48, 102, -146}, },
            {{48, 102, -146}, },
            {{0, 47, -52}, {48, 57, 175}, {58, 64, 1}, {65, 70, 176}, {71, 96, 1}, {97, 102, 177}, {103, 65535, 1}, },
            {{0, 65535, -149}, },
            {{0, 65535, -149}, },
            {{0, 65535, -124}, },
            {{0, 65535, -124}, },
            {{0, 8, 165}, {9, 9, 178}, {10, 10, 162}, {11, 12, 165}, {13, 13, 163}, {14, 31, 165}, {32, 32, 179}, {33, 41, 165}, {42, 42, 152}, {43, 46, 165}, {47, 47, 180}, {48, 65535, 165}, },
            {{0, 41, -124}, {42, 42, 181}, {43, 46, 136}, {47, 47, 182}, {48, 65535, 136}, },
            {{0, 47, -52}, {48, 57, 183}, {58, 64, 1}, {65, 70, 184}, {71, 96, 1}, {97, 102, 185}, {103, 65535, 1}, },
            {{0, 65535, -156}, },
            {{0, 65535, -156}, },
            {{0, 65535, -135}, },
            {{0, 65535, -135}, },
            {{0, 41, 67}, {42, 42, 186}, {43, 46, 67}, {47, 47, 187}, {48, 65535, 67}, },
            {{0, 8, 188}, {9, 9, 189}, {10, 10, 190}, {11, 12, 188}, {13, 13, 191}, {14, 31, 188}, {32, 32, 192}, {33, 34, 188}, {35, 35, 193}, {36, 41, 188}, {42, 42, 194}, {43, 46, 188}, {47, 47, 195}, {48, 65535, 188}, },
            {{0, 65535, -162}, },
            {{0, 8, 128}, {9, 9, 196}, {10, 10, 190}, {11, 12, 128}, {13, 13, 191}, {14, 31, 128}, {32, 32, 197}, {33, 41, 128}, {42, 42, 130}, {43, 46, 128}, {47, 47, 198}, {48, 65535, 128}, },
            {{0, 65535, -164}, },
            {{0, 65535, -162}, },
            {{0, 8, 193}, {9, 9, 199}, {10, 10, 190}, {11, 12, 193}, {13, 13, 191}, {14, 31, 193}, {32, 32, 200}, {33, 41, 193}, {42, 42, 201}, {43, 46, 193}, {47, 47, 202}, {48, 65535, 193}, },
            {{0, 65535, -75}, },
            {{0, 8, 203}, {9, 9, 204}, {10, 10, 205}, {11, 12, 203}, {13, 13, 206}, {14, 31, 203}, {32, 32, 207}, {33, 34, 203}, {35, 35, 208}, {36, 41, 203}, {42, 42, 137}, {43, 46, 203}, {47, 47, 209}, {48, 65535, 203}, },
            {{0, 65535, -140}, },
            {{0, 109, -36}, {110, 110, 210}, {111, 65535, -36}, },
            {{0, 115, -103}, {116, 116, 211}, {117, 65535, -103}, },
            {{0, 96, -9}, {97, 97, 212}, {98, 65535, -19}, },
            {{48, 57, 213}, {65, 70, 214}, {97, 102, 215}, },
            {{48, 102, -174}, },
            {{48, 102, -174}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 65535, -167}, },
            {{0, 65535, -167}, },
            {{0, 65535, -94}, },
            {{0, 8, 208}, {9, 9, 216}, {10, 10, 205}, {11, 12, 208}, {13, 13, 206}, {14, 31, 208}, {32, 32, 217}, {33, 41, 208}, {42, 42, 152}, {43, 46, 208}, {47, 47, 218}, {48, 65535, 208}, },
            {{0, 65535, -155}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 65535, -9}, },
            {{0, 41, 219}, {42, 42, 89}, {43, 46, 219}, {47, 47, 220}, {48, 65535, 219}, },
            {{0, 65535, -124}, },
            {{0, 65535, -162}, },
            {{0, 65535, -162}, },
            {{0, 65535, -164}, },
            {{0, 65535, -164}, },
            {{0, 65535, -162}, },
            {{0, 65535, -167}, },
            {{0, 41, -139}, {42, 42, 194}, {43, 65535, -139}, },
            {{0, 41, -162}, {42, 42, 221}, {43, 46, 188}, {47, 47, 222}, {48, 65535, 188}, },
            {{0, 65535, -164}, },
            {{0, 65535, -164}, },
            {{0, 41, 128}, {42, 42, 223}, {43, 46, 128}, {47, 47, 224}, {48, 65535, 128}, },
            {{0, 65535, -167}, },
            {{0, 65535, -167}, },
            {{0, 41, -154}, {42, 42, 201}, {43, 65535, -154}, },
            {{0, 41, -167}, {42, 42, 225}, {43, 46, 193}, {47, 47, 226}, {48, 65535, 193}, },
            {{0, 8, 227}, {9, 9, 228}, {10, 10, 229}, {11, 12, 227}, {13, 13, 230}, {14, 31, 227}, {32, 32, 231}, {33, 34, 227}, {35, 35, 232}, {36, 41, 227}, {42, 42, 233}, {43, 46, 227}, {47, 47, 234}, {48, 65535, 227}, },
            {{0, 65535, -205}, },
            {{0, 8, 235}, {9, 9, 236}, {10, 10, 229}, {11, 12, 235}, {13, 13, 230}, {14, 31, 235}, {32, 32, 237}, {33, 41, 235}, {42, 42, 238}, {43, 46, 235}, {47, 47, 239}, {48, 65535, 235}, },
            {{0, 65535, -207}, },
            {{0, 65535, -205}, },
            {{0, 8, 232}, {9, 9, 240}, {10, 10, 229}, {11, 12, 232}, {13, 13, 230}, {14, 31, 232}, {32, 32, 241}, {33, 41, 232}, {42, 42, 242}, {43, 46, 232}, {47, 47, 243}, {48, 65535, 232}, },
            {{0, 65535, -140}, },
            {{0, 115, -103}, {116, 116, 244}, {117, 65535, -103}, },
            {{0, 96, -9}, {97, 120, 30}, {121, 121, 245}, {122, 122, 30}, {123, 65535, 1}, },
            {{0, 115, -103}, {116, 116, 246}, {117, 65535, -103}, },
            {{48, 57, 247}, {65, 70, 248}, {97, 102, 249}, },
            {{48, 102, -215}, },
            {{48, 102, -215}, },
            {{0, 65535, -210}, },
            {{0, 65535, -210}, },
            {{0, 65535, -155}, },
            {{0, 41, 235}, {42, 42, 238}, {43, 65535, 235}, },
            {{0, 65535, -135}, },
            {{0, 41, -169}, {42, 42, 233}, {43, 65535, -169}, },
            {{0, 65535, -197}, },
            {{0, 41, 219}, {42, 42, 238}, {43, 65535, -188}, },
            {{0, 65535, -167}, },
            {{0, 41, -183}, {42, 42, 242}, {43, 65535, -183}, },
            {{0, 65535, -204}, },
            {{0, 65535, -205}, },
            {{0, 65535, -205}, },
            {{0, 65535, -207}, },
            {{0, 65535, -207}, },
            {{0, 65535, -205}, },
            {{0, 65535, -210}, },
            {{0, 41, -139}, {42, 42, 233}, {43, 65535, -139}, },
            {{0, 41, -205}, {42, 42, 250}, {43, 46, 227}, {47, 47, 251}, {48, 65535, 227}, },
            {{0, 65535, -221}, },
            {{0, 65535, -207}, },
            {{0, 65535, -207}, },
            {{0, 41, 97}, {42, 42, 238}, {43, 65535, -91}, },
            {{0, 41, 235}, {42, 42, 252}, {43, 46, 235}, {47, 47, 253}, {48, 65535, 235}, },
            {{0, 65535, -210}, },
            {{0, 65535, -210}, },
            {{0, 41, -154}, {42, 42, 242}, {43, 65535, -154}, },
            {{0, 41, -210}, {42, 42, 254}, {43, 46, 232}, {47, 47, 255}, {48, 65535, 232}, },
            {{0, 65535, -9}, },
            {{0, 64, -9}, {65, 81, 27}, {82, 82, 256}, {83, 90, 27}, {91, 65535, -9}, },
            {{0, 100, -37}, {101, 101, 257}, {102, 65535, -37}, },
            {{36, 122, -43}, },
            {{36, 122, -43}, },
            {{36, 122, -43}, },
            {{0, 65535, -223}, },
            {{0, 65535, -236}, },
            {{0, 65535, -225}, },
            {{0, 65535, -210}, },
            {{0, 65535, -227}, },
            {{0, 65535, -245}, },
            {{0, 100, -37}, {101, 101, 258}, {102, 65535, -37}, },
            {{0, 65535, -9}, },
            {{0, 96, -9}, {97, 101, 30}, {102, 102, 259}, {103, 122, 30}, {123, 65535, 1}, },
            {{0, 65535, -9}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 7, 6, 6, 6, 6, 2, 5, 0, 1, 3, 7, 5, 5, 5, 5, 5, 5, 7, 5, 5, 6, 6, -1, 5, 5, 5, 5, 7, 5, 5, 7, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, -1, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, -1, 7, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, -1, 5, 5, 7, 7, 7, -1, 6, 6, 6, 7, 7, 7, 7, -1, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, -1, 7, 7, 7, 6, 6, 6, 7, 7, 7, 7, -1, 7, -1, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 4, 4, -1, -1, -1, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 6, 6, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, -1, -1, -1, 5, 5, 5, 6, 6, 6, 6, 6, 5, 5, 5, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, -1, -1, -1, 6, 6, 6, -1, 6, 6, 6, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, 6, 6, -1, -1, 6, 6, 6, 6, 4, 5, 5, 5, 5, 5, 6, 6, -1, 6, 6, 6, 5, 4, 5, 4, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
