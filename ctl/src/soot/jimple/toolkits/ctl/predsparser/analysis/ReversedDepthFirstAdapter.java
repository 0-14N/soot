/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.toolkits.ctl.predsparser.analysis;

import java.util.*;
import soot.jimple.toolkits.ctl.predsparser.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPFile().apply(this);
        outStart(node);
    }

    public void inAFile(AFile node)
    {
        defaultIn(node);
    }

    public void outAFile(AFile node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFile(AFile node)
    {
        inAFile(node);
        {
            List<PPred> copy = new ArrayList<PPred>(node.getPred());
            Collections.reverse(copy);
            for(PPred e : copy)
            {
                e.apply(this);
            }
        }
        outAFile(node);
    }

    public void inAFormalsPred(AFormalsPred node)
    {
        defaultIn(node);
    }

    public void outAFormalsPred(AFormalsPred node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormalsPred(AFormalsPred node)
    {
        inAFormalsPred(node);
        if(node.getAny() != null)
        {
            node.getAny().apply(this);
        }
        if(node.getArr() != null)
        {
            node.getArr().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getFormalList() != null)
        {
            node.getFormalList().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFormalsPred(node);
    }

    public void inAGroundPred(AGroundPred node)
    {
        defaultIn(node);
    }

    public void outAGroundPred(AGroundPred node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGroundPred(AGroundPred node)
    {
        inAGroundPred(node);
        if(node.getAny() != null)
        {
            node.getAny().apply(this);
        }
        if(node.getArr() != null)
        {
            node.getArr().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAGroundPred(node);
    }

    public void inAFormal(AFormal node)
    {
        defaultIn(node);
    }

    public void outAFormal(AFormal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormal(AFormal node)
    {
        inAFormal(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getMetaType() != null)
        {
            node.getMetaType().apply(this);
        }
        outAFormal(node);
    }

    public void inASingleFormalList(ASingleFormalList node)
    {
        defaultIn(node);
    }

    public void outASingleFormalList(ASingleFormalList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleFormalList(ASingleFormalList node)
    {
        inASingleFormalList(node);
        if(node.getFormal() != null)
        {
            node.getFormal().apply(this);
        }
        outASingleFormalList(node);
    }

    public void inAMultiFormalList(AMultiFormalList node)
    {
        defaultIn(node);
    }

    public void outAMultiFormalList(AMultiFormalList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiFormalList(AMultiFormalList node)
    {
        inAMultiFormalList(node);
        if(node.getFormalList() != null)
        {
            node.getFormalList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getFormal() != null)
        {
            node.getFormal().apply(this);
        }
        outAMultiFormalList(node);
    }
}
