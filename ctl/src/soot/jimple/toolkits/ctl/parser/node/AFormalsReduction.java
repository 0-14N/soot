/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.toolkits.ctl.parser.node;

import soot.jimple.toolkits.ctl.parser.analysis.*;

@SuppressWarnings("nls")
public final class AFormalsReduction extends PReduction
{
    private TRed _red_;
    private TLParen _lParen_;
    private PFormalList _formalList_;
    private TRParen _rParen_;
    private TLBrace _lBrace_;
    private PRedBody _redBody_;
    private TRBrace _rBrace_;

    public AFormalsReduction()
    {
        // Constructor
    }

    public AFormalsReduction(
        @SuppressWarnings("hiding") TRed _red_,
        @SuppressWarnings("hiding") TLParen _lParen_,
        @SuppressWarnings("hiding") PFormalList _formalList_,
        @SuppressWarnings("hiding") TRParen _rParen_,
        @SuppressWarnings("hiding") TLBrace _lBrace_,
        @SuppressWarnings("hiding") PRedBody _redBody_,
        @SuppressWarnings("hiding") TRBrace _rBrace_)
    {
        // Constructor
        setRed(_red_);

        setLParen(_lParen_);

        setFormalList(_formalList_);

        setRParen(_rParen_);

        setLBrace(_lBrace_);

        setRedBody(_redBody_);

        setRBrace(_rBrace_);

    }

    @Override
    public Object clone()
    {
        return new AFormalsReduction(
            cloneNode(this._red_),
            cloneNode(this._lParen_),
            cloneNode(this._formalList_),
            cloneNode(this._rParen_),
            cloneNode(this._lBrace_),
            cloneNode(this._redBody_),
            cloneNode(this._rBrace_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFormalsReduction(this);
    }

    public TRed getRed()
    {
        return this._red_;
    }

    public void setRed(TRed node)
    {
        if(this._red_ != null)
        {
            this._red_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._red_ = node;
    }

    public TLParen getLParen()
    {
        return this._lParen_;
    }

    public void setLParen(TLParen node)
    {
        if(this._lParen_ != null)
        {
            this._lParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lParen_ = node;
    }

    public PFormalList getFormalList()
    {
        return this._formalList_;
    }

    public void setFormalList(PFormalList node)
    {
        if(this._formalList_ != null)
        {
            this._formalList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._formalList_ = node;
    }

    public TRParen getRParen()
    {
        return this._rParen_;
    }

    public void setRParen(TRParen node)
    {
        if(this._rParen_ != null)
        {
            this._rParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rParen_ = node;
    }

    public TLBrace getLBrace()
    {
        return this._lBrace_;
    }

    public void setLBrace(TLBrace node)
    {
        if(this._lBrace_ != null)
        {
            this._lBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBrace_ = node;
    }

    public PRedBody getRedBody()
    {
        return this._redBody_;
    }

    public void setRedBody(PRedBody node)
    {
        if(this._redBody_ != null)
        {
            this._redBody_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._redBody_ = node;
    }

    public TRBrace getRBrace()
    {
        return this._rBrace_;
    }

    public void setRBrace(TRBrace node)
    {
        if(this._rBrace_ != null)
        {
            this._rBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBrace_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._red_)
            + toString(this._lParen_)
            + toString(this._formalList_)
            + toString(this._rParen_)
            + toString(this._lBrace_)
            + toString(this._redBody_)
            + toString(this._rBrace_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._red_ == child)
        {
            this._red_ = null;
            return;
        }

        if(this._lParen_ == child)
        {
            this._lParen_ = null;
            return;
        }

        if(this._formalList_ == child)
        {
            this._formalList_ = null;
            return;
        }

        if(this._rParen_ == child)
        {
            this._rParen_ = null;
            return;
        }

        if(this._lBrace_ == child)
        {
            this._lBrace_ = null;
            return;
        }

        if(this._redBody_ == child)
        {
            this._redBody_ = null;
            return;
        }

        if(this._rBrace_ == child)
        {
            this._rBrace_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._red_ == oldChild)
        {
            setRed((TRed) newChild);
            return;
        }

        if(this._lParen_ == oldChild)
        {
            setLParen((TLParen) newChild);
            return;
        }

        if(this._formalList_ == oldChild)
        {
            setFormalList((PFormalList) newChild);
            return;
        }

        if(this._rParen_ == oldChild)
        {
            setRParen((TRParen) newChild);
            return;
        }

        if(this._lBrace_ == oldChild)
        {
            setLBrace((TLBrace) newChild);
            return;
        }

        if(this._redBody_ == oldChild)
        {
            setRedBody((PRedBody) newChild);
            return;
        }

        if(this._rBrace_ == oldChild)
        {
            setRBrace((TRBrace) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
