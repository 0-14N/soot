/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.toolkits.ctl.parser.node;

import soot.jimple.toolkits.ctl.parser.analysis.*;

@SuppressWarnings("nls")
public final class ARewrite extends PRewrite
{
    private TTransform _transform_;
    private TIdentifier _identifier_;
    private PMethodBody _methodBody_;

    public ARewrite()
    {
        // Constructor
    }

    public ARewrite(
        @SuppressWarnings("hiding") TTransform _transform_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") PMethodBody _methodBody_)
    {
        // Constructor
        setTransform(_transform_);

        setIdentifier(_identifier_);

        setMethodBody(_methodBody_);

    }

    @Override
    public Object clone()
    {
        return new ARewrite(
            cloneNode(this._transform_),
            cloneNode(this._identifier_),
            cloneNode(this._methodBody_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARewrite(this);
    }

    public TTransform getTransform()
    {
        return this._transform_;
    }

    public void setTransform(TTransform node)
    {
        if(this._transform_ != null)
        {
            this._transform_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._transform_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public PMethodBody getMethodBody()
    {
        return this._methodBody_;
    }

    public void setMethodBody(PMethodBody node)
    {
        if(this._methodBody_ != null)
        {
            this._methodBody_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._methodBody_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._transform_)
            + toString(this._identifier_)
            + toString(this._methodBody_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._transform_ == child)
        {
            this._transform_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._methodBody_ == child)
        {
            this._methodBody_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._transform_ == oldChild)
        {
            setTransform((TTransform) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._methodBody_ == oldChild)
        {
            setMethodBody((PMethodBody) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
