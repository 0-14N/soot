/* Soot - a J*va Optimization Framework
 * Copyright (C) 2003 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.toolkits.callgraph;
import soot.*;
import soot.options.*;
import soot.jimple.*;
import java.util.*;
import soot.util.*;
import soot.util.queue.*;
import soot.jimple.spark.bdddomains.*;

/** A context manager which adds no context-sensitivity to the call graph.
 * @author Ondrej Lhotak
 */
public class BDDContextInsensitiveContextManager implements BDDContextManager 
{ 
    private BDDCallGraph cg;

    public BDDCallGraph callGraph() { return cg; }

    public BDDContextInsensitiveContextManager( BDDCallGraph cg ) {
        this.cg = cg;
    }

    public void addStaticEdge( MethodOrMethodContext src, Unit srcUnit, SootMethod target, int kind ) {
        cg.addEdge( src.method(), srcUnit, target, kind );
    }

    public void addStaticEdges( Object sourceContext, <srcm, stmt, kind, tgtm> edges ) {
        cg.addEdges( new {null=>srcc, null=>tgtc} {} >< edges {} );
    }

    public void addVirtualEdge( MethodOrMethodContext src, Unit srcUnit, SootMethod target, int kind, Object typeContext ) {
        cg.addEdge( src.method(), srcUnit, target, kind );
    }

    public void addVirtualEdges( <srcm, stmt, kind, tgtm> edges ) {
        cg.addEdges( new {null=>srcc, null=>tgtc} {} >< edges {} );
    }
}

