/* Soot - a J*va Optimization Framework
 * Copyright (C) 2003 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.spark.queue;
import soot.util.*;
import soot.jimple.spark.bdddomains.*;
import soot.jimple.spark.*;
import soot.jimple.toolkits.callgraph.*;
import soot.*;
import soot.util.queue.*;
import jedd.*;
import java.util.*;

public final class Rsrcc_srcm_stmt_kind_tgtc_tgtmBDD extends Rsrcc_srcm_stmt_kind_tgtc_tgtm {
    private <srcc:V1, srcm:T1, stmt:ST, kind:FD, tgtc:V2, tgtm:T2> bdd = 0B;
    void add( <srcc:V1, srcm:T1, stmt:ST, kind:FD, tgtc:V2, tgtm:T2> tuple ) { bdd |= tuple; }
    public Rsrcc_srcm_stmt_kind_tgtc_tgtmBDD( <srcc:V1, srcm:T1, stmt:ST, kind:FD, tgtc:V2, tgtm:T2> bdd ) { this.bdd = bdd; }
    Rsrcc_srcm_stmt_kind_tgtc_tgtmBDD() {}
    public Iterator iterator() {;
        final Iterator it = bdd.iterator( new Attribute[] { srcc.v(), srcm.v(), stmt.v(), kind.v(), tgtc.v(), tgtm.v() } );
        bdd = 0B;
        return new Iterator() {
            public boolean hasNext() { return it.hasNext(); }
            public Object next() {
                return new Tuple( (Object[]) it.next() );
            }
            public void remove() { throw new UnsupportedOperationException(); }
        };
    }
    public <srcc:V1, srcm:T1, stmt:ST, kind:FD, tgtc:V2, tgtm:T2> get() {
        <srcc:V1, srcm:T1, stmt:ST, kind:FD, tgtc:V2, tgtm:T2> ret = bdd;
        bdd = 0B;
        return ret;
    }
    public boolean hasNext() { return bdd != 0B; }
    private final class Tuple extends Rsrcc_srcm_stmt_kind_tgtc_tgtm.Tuple {
        private Object[] tuple;
        public Tuple( Object[] tuple ) { this.tuple = tuple; }
        public Context srcc() { return (Context) tuple[0]; }
        public SootMethod srcm() { return (SootMethod) tuple[1]; }
        public Unit stmt() { return (Unit) tuple[2]; }
        public Kind kind() { return (Kind) tuple[3]; }
        public Context tgtc() { return (Context) tuple[4]; }
        public SootMethod tgtm() { return (SootMethod) tuple[5]; }
    }
}
