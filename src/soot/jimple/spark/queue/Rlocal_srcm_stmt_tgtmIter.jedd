/* Soot - a J*va Optimization Framework
 * Copyright (C) 2003 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.spark.queue;
import soot.util.*;
import soot.jimple.spark.bdddomains.*;
import soot.jimple.spark.*;
import soot.jimple.toolkits.callgraph.*;
import soot.*;
import soot.util.queue.*;
import jedd.*;
import java.util.*;

public class Rlocal_srcm_stmt_tgtmIter extends Rlocal_srcm_stmt_tgtm{
    protected Iterator r;
    public Rlocal_srcm_stmt_tgtmIter( Iterator r ) { this.r = r; }
    public Iterator iterator() {;
        return new Iterator() {
            public boolean hasNext() { return r.hasNext(); }
            public Object next() {
                return new Tuple( (Local) r.next(), (SootMethod) r.next(), (Unit) r.next(), (SootMethod) r.next() );
            }
            public void remove() { throw new UnsupportedOperationException(); }
        };
    }
    public <local:V1, srcm:T1, stmt:ST, tgtm:T2> get() {
        <local:V1, srcm:T1, stmt:ST, tgtm:T2> ret = 0B;
        while( r.hasNext() ) {
            ret |= new { r.next()=>local, r.next()=>srcm, r.next()=>stmt, r.next()=>tgtm };
        }
        return ret;
    }
    public boolean hasNext() { return r.hasNext(); }
    private final class Tuple extends Rlocal_srcm_stmt_tgtm.Tuple {
        private Local _local;
        public Local local() { return _local; }
        private SootMethod _srcm;
        public SootMethod srcm() { return _srcm; }
        private Unit _stmt;
        public Unit stmt() { return _stmt; }
        private SootMethod _tgtm;
        public SootMethod tgtm() { return _tgtm; }
        public Tuple( Local _local, SootMethod _srcm, Unit _stmt, SootMethod _tgtm ) {
            this._local = _local;
            this._srcm = _srcm;
            this._stmt = _stmt;
            this._tgtm = _tgtm;
        }
    }
}
