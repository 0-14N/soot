/* Soot - a J*va Optimization Framework
 * Copyright (C) 2002,2003 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.spark.pag;
import java.util.*;
import soot.jimple.*;
import soot.jimple.spark.*;
import soot.*;
import soot.jimple.spark.sets.*;
import soot.jimple.spark.solver.*;
import soot.jimple.spark.internal.*;
import soot.util.*;
import soot.util.queue.*;
import soot.options.BDDSparkOptions;
import soot.tagkit.*;
import soot.jimple.spark.bdddomains.*;

/** Pointer assignment graph.
 * @author Ondrej Lhotak
 */
public class BDDPAG extends AbstractPAG {
    public BDDPAG( final BDDSparkOptions opts ) {
        super( opts );

        typeManager = new BDDTypeManager(this);
        if( !opts.ignore_types() ) {
            typeManager.setFastHierarchy( Scene.v().getOrMakeFastHierarchy() );
        }

    }

    public PointsToSet reachingObjects( Local l ) {
        VarNode vn = findLocalVarNode( l );
        if( vn == null ) return EmptyPointsToSet.v();
        return new BDDPointsToSet( 
            (var=>) (pointsTo {var} >< new { vn => var }{var}) );
    }
    public PointsToSet reachingObjects( SootField f ) {
        throw new RuntimeException( "NYI" );
    }
    public PointsToSet reachingObjects( PointsToSet ptset, SootField f ) {
        throw new RuntimeException( "NYI" );
    }
    public PointsToSet reachingObjectsOfArrayElement( PointsToSet ptset ) {
        throw new RuntimeException( "NYI" );
    }

    public Iterator simpleSourcesIterator() {
        return ((dst=>) edgeSet ).iterator();
    }
    public Iterator allocSourcesIterator() {
        return ((var=>) alloc ).iterator();
    }
    public Iterator storeSourcesIterator() {
        return ((dst=>, fld=>)stores ).iterator();
    }
    public Iterator loadSourcesIterator() {
        throw new RuntimeException( "NYI" );
    }
    public Iterator simpleInvSourcesIterator() {
        return ((src=>) edgeSet ).iterator();
    }
    public Iterator allocInvSourcesIterator() {
        return ((obj=>) alloc ).iterator();
    }
    public Iterator storeInvSourcesIterator() {
        throw new RuntimeException( "NYI" );
    }
    public Iterator loadInvSourcesIterator() {
        return ((src=>, fld=>) loads ).iterator();
    }

    public boolean doAddSimpleEdge( VarNode from, VarNode to ) {
        return edgeSet != ( edgeSet |= new { from => src, to => dst } );
    }

    public boolean doAddStoreEdge( VarNode from, FieldRefNode to ) {
        return stores != ( stores |= new
                    { from => src, to.getBase() => dst, to.getField() => fld } );
    }

    public boolean doAddLoadEdge( FieldRefNode from, VarNode to ) {
        return loads != ( loads |= new
                    { from.getBase() => src, from.getField() => fld, to => dst } );
    }

    public boolean doAddAllocEdge( AllocNode from, VarNode to ) {
        return alloc != ( alloc |= new { from => obj, to => var } );
    }

    private BDDSparkOptions opts;

    // var := new obj()
    public <obj:H1, var:V1> alloc;

    // var points to object obj
    public <var:V1, obj:H1> pointsTo;

    // dst := src
    public <src:V1, dst:V2> edgeSet;

    // dst := src.fld
    public <src:V1, fld:FD, dst:V2> loads;

    // dst.fld := src
    public <src:V1, dst:V2, fld:FD> stores;

    // base.fld points to object obj
    public <base:H1, fld:FD, obj:H2> fieldPt;

    private BDDOnFlyCallGraph ofcg;
    public void setOnFlyCallGraph( BDDOnFlyCallGraph ofcg ) { this.ofcg = ofcg; }
    public BDDOnFlyCallGraph getOnFlyCallGraph() { return ofcg; }
    public BDDOnFlyCallGraph ofcg() { return ofcg; }
}

